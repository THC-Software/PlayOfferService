// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PlayOfferService.Domain;

#nullable disable

namespace PlayOfferService.Migrations
{
    [DbContext(typeof(DbReadContext))]
    partial class DbReadContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PlayOfferService.Domain.Events.BaseEvent", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("eventId");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entityId");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("entityType");

                    b.Property<string>("EventData")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("eventData");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("eventType");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.HasKey("EventId")
                        .HasName("pK_events");

                    b.ToTable("events", (string)null);
                });

            modelBuilder.Entity("PlayOfferService.Models.Club", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pK_clubs");

                    b.ToTable("clubs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("06b812a7-5131-4510-82ff-bffac33e0f3e"),
                            Status = 0
                        });
                });

            modelBuilder.Entity("PlayOfferService.Models.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClubId")
                        .HasColumnType("uuid")
                        .HasColumnName("clubId");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pK_members");

                    b.ToTable("members", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("40c0981d-e2f8-4af3-ae6c-17f79f3ba8c2"),
                            ClubId = new Guid("06b812a7-5131-4510-82ff-bffac33e0f3e"),
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("ccc1c8fc-89b5-4026-b190-9d9e7e7bc18d"),
                            ClubId = new Guid("06b812a7-5131-4510-82ff-bffac33e0f3e"),
                            Status = 0
                        });
                });

            modelBuilder.Entity("PlayOfferService.Models.PlayOffer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("AcceptedStartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("acceptedStartTime");

                    b.Property<Guid>("ClubId")
                        .HasColumnType("uuid")
                        .HasColumnName("clubId");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creatorId");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("boolean")
                        .HasColumnName("isCancelled");

                    b.Property<Guid?>("OpponentId")
                        .HasColumnType("uuid")
                        .HasColumnName("opponentId");

                    b.Property<DateTime>("ProposedEndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("proposedEndTime");

                    b.Property<DateTime>("ProposedStartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("proposedStartTime");

                    b.Property<Guid?>("ReservationId")
                        .HasColumnType("uuid")
                        .HasColumnName("reservationId");

                    b.HasKey("Id")
                        .HasName("pK_playOffers");

                    b.HasIndex("ClubId")
                        .HasDatabaseName("iX_playOffers_clubId");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("iX_playOffers_creatorId");

                    b.HasIndex("OpponentId")
                        .HasDatabaseName("iX_playOffers_opponentId");

                    b.HasIndex("ReservationId")
                        .HasDatabaseName("iX_playOffers_reservationId");

                    b.ToTable("playOffers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("bd18fca2-8708-495a-8e15-633fa33e8a7b"),
                            ClubId = new Guid("06b812a7-5131-4510-82ff-bffac33e0f3e"),
                            CreatorId = new Guid("40c0981d-e2f8-4af3-ae6c-17f79f3ba8c2"),
                            IsCancelled = false,
                            ProposedEndTime = new DateTime(2024, 6, 1, 14, 28, 22, 322, DateTimeKind.Utc).AddTicks(9668),
                            ProposedStartTime = new DateTime(2024, 6, 1, 13, 28, 22, 322, DateTimeKind.Utc).AddTicks(9665)
                        });
                });

            modelBuilder.Entity("PlayOfferService.Models.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.HasKey("Id")
                        .HasName("pK_reservations");

                    b.ToTable("reservations", (string)null);
                });

            modelBuilder.Entity("PlayOfferService.Models.PlayOffer", b =>
                {
                    b.HasOne("PlayOfferService.Models.Club", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_playOffers_clubs_clubId");

                    b.HasOne("PlayOfferService.Models.Member", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_playOffers_members_creatorId");

                    b.HasOne("PlayOfferService.Models.Member", "Opponent")
                        .WithMany()
                        .HasForeignKey("OpponentId")
                        .HasConstraintName("fK_playOffers_members_opponentId");

                    b.HasOne("PlayOfferService.Models.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationId")
                        .HasConstraintName("fK_playOffers_reservations_reservationId");

                    b.Navigation("Club");

                    b.Navigation("Creator");

                    b.Navigation("Opponent");

                    b.Navigation("Reservation");
                });
#pragma warning restore 612, 618
        }
    }
}
